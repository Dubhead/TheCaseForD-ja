メモリモデルとCPUの多コア化

DはCの関数を直接呼べるので、Cのメモリモデルをそのまま使えばよいように思えるかもしれません。
実際そうだったら良かったのですが、それは、明王朝時代の壷のすぐそばにピンクの象がいるから危険だ、という幻覚と同じくらい非現実的です。
すでに多コアの時代になりました − 超並列アーキテクチャがCPUパワーを持て余しています。
それをうまく使えればよいのですがね。
多コアのCPUはもう当たり前になり、Cがそれを扱うやり方はあまりに平凡すぎてエラーの元になっています。
他の手続き型やオブジェクト指向の言語でも大した改良はできておらず、こういった状況から関数型言語が再流行しています。関数型言語では、データの不変性を使うと、並列性に関する問題を綺麗に回避できます。

Dは、スレッドに関しては、先行者の成果をじっくり見てから賭けができる有利な立場にいます。
そこでDは、あるメモリモデルに全財産を賭けています。このモデルは、他の多くの言語とは根本的に異なる点があります。
ご存じの通り、旧来のスレッドは以下のように動きます: プリミティブを呼び出してスレッドを作り、このスレッドはプログラム中のあらゆるデータを読み書きできる、というものです。
OS依存の謎の仕組みを使えば、スレッドは自分だけが使えるデータを取得することもできます。
簡単にいうと、メモリは全スレッドで共有するのがディフォルトなのです。
このことは以前から問題であり、そのせいで現在は生き地獄状態となっています。
データを並列に更新するというのは手に負えないくらい厄介な問題なのです。
データを常に良好な状態に保つため、様々な物を正しく追跡し同期させるという仕事は非常に困難です。
しかしこれまでは、そういう問題があっても我慢されてきました。共有メモリという概念は実際のハードウェアによく似たモデルであり、うまく使えば性能を出せるからです。
いま我々は「生き地獄」状態へと差しかかりつつあります − 今では、実際のメモリは共有されない方向へどんどん進んでいるのです。
今日の実際のハードウェアでは、プロセッサ同士はメモリ経由で通信しますが、そのメモリは深い階層構造となっており、その大部分は各コア専用の領域です。
つまり、共有メモリは使いにくい上、実際のハードウェアからかけ離れたものになっていくので、近いうちに <i>遅い</i> やり方になってしまうだろうという事が分かりました。

従来の言語がこういった問題と格闘している一方で、関数型言語は、数学的純粋さに基づき、「ハードウェアをモデル化することに興味はない、本物の数学をモデル化したいんだ」という立場を取ります。
そして数学は値を変更するということがほとんどないため、並列計算で利用するためには理想的な道具となります。
(数学者から初めてプログラマへ転身した人達が並列計算のことを聞いたときのことを想像してみましょう − 彼らはきっと、「おい、ちょっと待て」と頭を抱えたはずです。)
関数型プログラミングの世界では、このような計算モデルは本質的に、命令の順序をバラバラにして並列実行することと相性がよいことが分かっていました。
しかしこの潜在能力が活かせるようになるのは将来のことだと思われており、実際に実現されたのはやっと最近になってのことでした。
今日では、本格的なアプリケーションが並列処理を部分的にでも取り入れようとする際には、データ変更のない関数型スタイルでプログラムを書くことが非常に重要だということが徐々に理解されてきています。

では、この問題についてDが取っている立場とはどのようなものでしょう?
Dにおける並列処理への取り組みで、最重要な概念とは、このようなものです:

<b>メモリは、ディフォルトではスレッドごとに割り当てられるものであり、要求があれば共有される。</b>

Dでは、メモリはすべて、それを使うスレッドごとに割り当てられるのがディフォルトです。
グローバル変数でさえ、そうと気付かないうちに、スレッドごとに割り当てられてしまいます。
共有したい場合は、オブジェクトに <b>shared</b> と付けて宣言すると、複数のスレッドから見えるという意味になります。
ここで重要な点として、型システムが共有データのことを知っている、という事が挙げられます。
型システムは、共有データに関して行ってよいことを制限しており、これによって、同期の仕組みが全体を通して正しく使われることが保証されます。
スレッドがディフォルトでメモリを共有する言語においては、アクセスの同期という厄介な問題がありますが、このモデルではその問題の大元となるものを見事に回避しています。
前者のような言語では、データが共有されるかどうかが型システムには分からないため、たいていは自己申告に頼ることになります − つまり、共有されるデータにはプログラマが適切に注釈を付けているはずだ、と信用するのです。
その結果、共有されないデータ、注釈のついた共有データ、共有されるが注釈の付かないデータ、そしてそれらが組み合わさった様々な状況において、何が起こるかを説明する規則は複雑なものになってしまいます。
その規則は非常に明快なので、それを理解できる5人の人達なら全員がそれを理解でき、そして皆が、こんなことはもう止めようよと思っています。

多コア化するCPUをサポートするという分野は、研究開発が非常に盛んであり、良いモデルはまだ発見されていません。
ディフォルトでスレッド固有なメモリモデルという確かな基盤を手始めとして、Dは、選択肢を狭めないような便利な道具を徐々に取り入れています。
それらは例えば、副作用のない関数、ロックのいらないプリミティブ、従来通りのロックを使ったプログラミング、メッセージキュー (計画中) といったものです。

オーナーシップ型といった、より先進的な機構についても議論がされています。

# Immutability の前まで
# eof
